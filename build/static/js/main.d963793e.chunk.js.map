{"version":3,"sources":["components/movies/movie/movie.tsx","components/movies/movieList/movieList.tsx","components/movies/moviesNav/resetFilterBtn/resetFilterBtn.tsx","components/movies/moviesNav/genreDropdown/action/action.tsx","components/movies/moviesNav/genreDropdown/adventure/adventure.tsx","components/movies/moviesNav/genreDropdown/comedy/comedy.tsx","components/movies/moviesNav/genreDropdown/drama/drama.tsx","components/movies/moviesNav/genreDropdown/animation/animation.tsx","components/movies/moviesNav/genreDropdown/crime/crime.tsx","components/movies/moviesNav/genreDropdown/documentary/documentary.tsx","components/movies/moviesNav/genreDropdown/family/family.tsx","components/movies/moviesNav/genreDropdown/fantasy/fantasy.tsx","components/movies/moviesNav/genreDropdown/history/history.tsx","components/movies/moviesNav/genreDropdown/horror/horror.tsx","components/movies/moviesNav/genreDropdown/music/music.tsx","components/movies/moviesNav/genreDropdown/mystery/mystery.tsx","components/movies/moviesNav/genreDropdown/romance/romance.tsx","components/movies/moviesNav/genreDropdown/scienceFiction/scienceFiction.tsx","components/movies/moviesNav/genreDropdown/tvMovie/tvMovie.tsx","components/movies/moviesNav/genreDropdown/thriller/thriller.tsx","components/movies/moviesNav/genreDropdown/war/war.tsx","components/movies/moviesNav/genreDropdown/genreDropdown.tsx","components/movies/moviesNav/brand/brand.tsx","components/movies/moviesNav/sortDropdown/addedDate/addedDate.tsx","components/movies/moviesNav/sortDropdown/releaseDate/releaseDate.tsx","components/movies/moviesNav/sortDropdown/sortDropdown.tsx","components/movies/moviesNav/moviesNav.tsx","components/movies/movies.tsx","components/movies/moviesUtils.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["cardStyle","width","Movie","props","className","style","src","movie","image_url","alt","original_title","MovieList","movies","map","key","imdb_id","ResetFilterBtn","type","id","aria-haspopup","aria-expanded","onClick","resetFilter","setIsFiltered","ActionGenre","onFilter","AdventureGenre","ComedyGenre","DramaGenre","AnimationGenre","CrimeGenre","DocumentaryGenre","FamilyGenre","FantasyGenre","HistoryGenre","HorrorGenre","MusicGenre","MysteryGenre","RomanceGenre","ScienceFictionGenre","TvMovieGenre","ThrillerGenre","WarGenre","GenreDropdown","event","filterByGenre","target","data-toggle","aria-labelledby","Brand","AddedDate","sortMovies","ReleaseDate","SortDropdown","MoviesNav","useState","isFiltered","Movies","setMovies","unfilteredMovies","useRef","useEffect","a","fetch","resp","json","current","getMovies","genreName","filteredMovies","filter","genres","indexOf","isGenreInMovie","length","console","log","moviesCopy","concat","sort","b","Date","created_date","getTime","sortByAddedDate","release_date","sortByReleaseDate","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d963793e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst cardStyle = {\n  width: \"9rem\"\n};\n\nfunction Movie(props: any) {\n  return (\n    <div className=\"col\">\n      <div className=\"card border-0 mb-3\" style={cardStyle}>\n        <img\n          className=\"card-img-top rounded\"\n          src={props.movie.image_url}\n          alt={props.movie.original_title}\n        ></img>\n        <div className=\"card-body p-0\">\n          <p className=\"card-text text-center text-truncate font-weight-light\">\n            {props.movie.original_title}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Movie;\n","import React from \"react\";\nimport Movie from \"../movie/movie\";\nimport { IMovie } from \"../movies.interface\";\n\nexport function MovieList(props: { movies: IMovie[] }) {\n  return (\n    <div className=\"row\">\n      {props.movies.map(movie => (\n        <Movie movie={movie} key={movie.imdb_id} />\n      ))}\n    </div>\n  );\n}\n\nexport default MovieList;\n","import React from 'react';\n\nfunction ResetFilterBtn(props: any) {\n  function onResetFilter() {\n    props.resetFilter();\n    props.setIsFiltered(false);\n  }\n  return (\n    <button\n      className=\"btn btn-warning bg mr-1\"\n      type=\"button\"\n      id=\"resetFilter\"\n      aria-haspopup=\"true\"\n      aria-expanded=\"false\"\n      onClick={onResetFilter}\n    >\n      Reset\n    </button>\n  );\n}\n\nexport default ResetFilterBtn;\n","import React from 'react';\n\nfunction ActionGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Action\"\n      onClick={props.onFilter}\n    >\n      Action\n    </button>\n  );\n}\n\nexport default ActionGenre;\n","import React from 'react';\n\nfunction AdventureGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Adventure\"\n      onClick={props.onFilter}\n    >\n      Adventure\n    </button>\n  );\n}\n\nexport default AdventureGenre;\n","import React from 'react';\n\nfunction ComedyGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Comedy\"\n      onClick={props.onFilter}\n    >\n      Comedy\n    </button>\n  );\n}\n\nexport default ComedyGenre;\n","import React from 'react';\n\nfunction DramaGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Drama\"\n      onClick={props.onFilter}\n    >\n      Drama\n    </button>\n  );\n}\n\nexport default DramaGenre;\n","import React from 'react';\n\nfunction AnimationGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Animation\"\n      onClick={props.onFilter}\n    >\n      Animation\n    </button>\n  );\n}\n\nexport default AnimationGenre;\n","import React from 'react';\n\nfunction CrimeGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Crime\"\n      onClick={props.onFilter}\n    >\n      Crime\n    </button>\n  );\n}\n\nexport default CrimeGenre;\n","import React from 'react';\n\nfunction DocumentaryGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Documentary\"\n      onClick={props.onFilter}\n    >\n      Documentary\n    </button>\n  );\n}\n\nexport default DocumentaryGenre;\n","import React from 'react';\n\nfunction FamilyGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Family\"\n      onClick={props.onFilter}\n    >\n      Family\n    </button>\n  );\n}\n\nexport default FamilyGenre;\n","import React from 'react';\n\nfunction FantasyGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Fantasy\"\n      onClick={props.onFilter}\n    >\n      Fantasy\n    </button>\n  );\n}\n\nexport default FantasyGenre;\n","import React from 'react';\n\nfunction HistoryGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"History\"\n      onClick={props.onFilter}\n    >\n      History\n    </button>\n  );\n}\n\nexport default HistoryGenre;\n","import React from 'react';\n\nfunction HorrorGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Horror\"\n      onClick={props.onFilter}\n    >\n      Horror\n    </button>\n  );\n}\n\nexport default HorrorGenre;\n","import React from 'react';\n\nfunction MusicGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Music\"\n      onClick={props.onFilter}\n    >\n      Music\n    </button>\n  );\n}\n\nexport default MusicGenre;\n","import React from 'react';\n\nfunction MysteryGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Mystery\"\n      onClick={props.onFilter}\n    >\n      Mystery\n    </button>\n  );\n}\n\nexport default MysteryGenre;\n","import React from 'react';\n\nfunction RomanceGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Romance\"\n      onClick={props.onFilter}\n    >\n      Romance\n    </button>\n  );\n}\n\nexport default RomanceGenre;\n","import React from 'react';\n\nfunction ScienceFictionGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Science Fiction\"\n      onClick={props.onFilter}\n    >\n      Science Fiction\n    </button>\n  );\n}\n\nexport default ScienceFictionGenre;\n","import React from 'react';\n\nfunction TvMovieGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"TV Movie\"\n      onClick={props.onFilter}\n    >\n      TV Movie\n    </button>\n  );\n}\n\nexport default TvMovieGenre;\n","import React from 'react';\n\nfunction ThrillerGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"Thriller\"\n      onClick={props.onFilter}\n    >\n      Thriller\n    </button>\n  );\n}\n\nexport default ThrillerGenre;\n","import React from 'react';\n\nfunction WarGenre(props: any) {\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"War\"\n      onClick={props.onFilter}\n    >\n      War\n    </button>\n  );\n}\n\nexport default WarGenre;\n","import React from 'react';\nimport ActionGenre from './action/action';\nimport AdventureGenre from './adventure/adventure';\nimport ComedyGenre from './comedy/comedy';\nimport DramaGenre from './drama/drama';\nimport AnimationGenre from './animation/animation';\nimport CrimeGenre from './crime/crime';\nimport DocumentaryGenre from './documentary/documentary';\nimport FamilyGenre from './family/family';\nimport FantasyGenre from './fantasy/fantasy';\nimport HistoryGenre from './history/history';\nimport HorrorGenre from './horror/horror';\nimport MusicGenre from './music/music';\nimport MysteryGenre from './mystery/mystery';\nimport RomanceGenre from './romance/romance';\nimport ScienceFictionGenre from './scienceFiction/scienceFiction';\nimport TvMovieGenre from './tvMovie/tvMovie';\nimport ThrillerGenre from './thriller/thriller';\nimport WarGenre from './war/war';\n\nfunction GenreDropdown(props: any) {\n  const onFilter = (event: any) => {\n    props.filterByGenre(event.target.id);\n    props.setIsFiltered(true);\n  };\n\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-secondary dropdown-toggle bg mr-1\"\n        type=\"button\"\n        id=\"genreDropdown\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        Genre\n      </button>\n      <div className=\"dropdown-menu\" aria-labelledby=\"genreDropdown\">\n        <ActionGenre onFilter={onFilter} />\n        <AdventureGenre onFilter={onFilter} />\n        <ComedyGenre onFilter={onFilter} />\n        <DramaGenre onFilter={onFilter} />\n        <AnimationGenre onFilter={onFilter} />\n        <CrimeGenre onFilter={onFilter} />\n        <DocumentaryGenre onFilter={onFilter} />\n        <FamilyGenre onFilter={onFilter} />\n        <FantasyGenre onFilter={onFilter} />\n        <HistoryGenre onFilter={onFilter} />\n        <HorrorGenre onFilter={onFilter} />\n        <MusicGenre onFilter={onFilter} />\n        <MysteryGenre onFilter={onFilter} />\n        <RomanceGenre onFilter={onFilter} />\n        <ScienceFictionGenre onFilter={onFilter} />\n        <TvMovieGenre onFilter={onFilter} />\n        <ThrillerGenre onFilter={onFilter} />\n        <WarGenre onFilter={onFilter} />\n      </div>\n    </div>\n  );\n}\n\nexport default GenreDropdown;\n","import React from \"react\";\nfunction Brand(props: any) {\n  return (\n    <div>\n      <span className=\"navbar-brand mb-0 h1\">Fvs</span>\n    </div>\n  );\n}\nexport default Brand;\n","import React from 'react';\n\nfunction AddedDate(props: any) {\n  function onSort() {\n    props.sortMovies('addedDate');\n  }\n\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"AddedDate\"\n      onClick={onSort}\n    >\n      Added Date\n    </button>\n  );\n}\n\nexport default AddedDate;\n","import React from 'react';\n\nfunction ReleaseDate(props: any) {\n  function onSort() {\n    props.sortMovies('releaseDate');\n  }\n\n  return (\n    <button\n      className=\"dropdown-item btn-sm\"\n      type=\"button\"\n      id=\"releaseDate\"\n      onClick={onSort}\n    >\n      Release Date\n    </button>\n  );\n}\n\nexport default ReleaseDate;\n","import React from 'react';\nimport AddedDate from './addedDate/addedDate';\nimport ReleaseDate from './releaseDate/releaseDate';\n\nfunction SortDropdown(props: any) {\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-secondary dropdown-toggle bg mr-1\"\n        type=\"button\"\n        id=\"sortDropdown\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        Sort\n      </button>\n      <div className=\"dropdown-menu\" aria-labelledby=\"sortDropdown\">\n        <AddedDate sortMovies={props.sortMovies} />\n        <ReleaseDate sortMovies={props.sortMovies} />\n      </div>\n    </div>\n  );\n}\n\nexport default SortDropdown;\n","import React, { useState } from 'react';\nimport ResetFilterBtn from './resetFilterBtn/resetFilterBtn';\nimport GenreDropdown from './genreDropdown/genreDropdown';\nimport Brand from './brand/brand';\nimport SortDropdown from './sortDropdown/sortDropdown';\n\nfunction MoviesNav(props: any) {\n  const [isFiltered, setIsFiltered] = useState(false);\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-4\">\n        <Brand />\n        <GenreDropdown\n          filterByGenre={props.filterByGenre}\n          setIsFiltered={setIsFiltered}\n        />\n        <SortDropdown sortMovies={props.sortMovies} />\n        {isFiltered ? (\n          <ResetFilterBtn\n            resetFilter={props.resetFilter}\n            setIsFiltered={setIsFiltered}\n          />\n        ) : (\n          ''\n        )}\n      </nav>\n    </div>\n  );\n}\n\nexport default MoviesNav;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { IMovie, IMovieResponse } from './movies.interface';\nimport { MovieList } from './movieList/movieList';\nimport MoviesNav from './moviesNav/moviesNav';\nimport {\n  isGenreInMovie,\n  sortByAddedDate,\n  sortByReleaseDate\n} from './moviesUtils';\n\nfunction Movies() {\n  // init state is empty thats why the type is so wierd\n  const [movies, setMovies] = useState<IMovie[] | []>([]);\n  const unfilteredMovies = useRef<IMovie[]>([]);\n\n  useEffect(() => {\n    async function getMovies() {\n      const resp = await fetch('https://movies.andimenge.de/api/movies');\n      const json: IMovieResponse = await resp.json();\n      unfilteredMovies.current = json.movies;\n      setMovies(json.movies);\n    }\n    getMovies();\n  }, []);\n\n  const resetFilter = () => {\n    setMovies(unfilteredMovies.current);\n  };\n\n  const filterByGenre = (genreName: string) => {\n    const filteredMovies: IMovie[] = movies.filter(movie =>\n      isGenreInMovie(movie, genreName)\n    );\n    if (filteredMovies.length > 0) {\n      setMovies(filteredMovies);\n    } else {\n      console.log('no movies found with genre:', genreName);\n    }\n  };\n\n  const sortMovies = (type: string) => {\n    const moviesCopy = movies.concat();\n\n    if (type === 'addedDate') {\n      setMovies(sortByAddedDate(moviesCopy));\n    }\n    if (type === 'releaseDate') {\n      setMovies(sortByReleaseDate(moviesCopy));\n    }\n  };\n\n  return (\n    <div className=\"container-flex mx-2\">\n      <MoviesNav\n        filterByGenre={filterByGenre}\n        resetFilter={resetFilter}\n        sortMovies={sortMovies}\n      />\n      <MovieList movies={movies} />\n    </div>\n  );\n}\n\nexport default Movies;\n","import { IMovie } from './movies.interface';\n\nexport function isGenreInMovie(movie: IMovie, genreName: string): boolean {\n  return movie.genres.indexOf(genreName) > -1;\n}\n\nexport function sortByAddedDate(movies: IMovie[]): IMovie[] {\n  return movies.sort((a, b) => {\n    return (\n      new Date(b.created_date).getTime() - new Date(a.created_date).getTime()\n    );\n  });\n}\n\nexport function sortByReleaseDate(movies: IMovie[]): IMovie[] {\n  return movies.sort((a, b) => {\n    return (\n      new Date(b.release_date).getTime() - new Date(a.release_date).getTime()\n    );\n  });\n}\n","import React from \"react\";\nimport Movies from \"./components/movies/movies\";\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <Movies />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}